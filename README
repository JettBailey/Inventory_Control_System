B.  Create a README file that includes notes describing where in the code to find the changes you made for each of parts C to J.
Each note should include the prompt, file name, line number, and change.

    README file, file, created README file for part B


C - Customize the HTML user interface for your customer’s application. The user interface should include the shop name, the product names, and the names of the parts.

    1. mainscreen.html, line 14: Renamed "My Bicycle Shop" to "My Furniture Shop"
    2. mainscreen.html, line 19: Renamed "Shop" to "Furniture Shop"


D - Add an “About” page to the application to describe your chosen customer’s company to web viewers and include navigation to and from the “About” page and the main screen.

    1. about.html, file, added the about.html file to create the "About Us" page
    2. about.html, line 5, changed the title tag from "Title" to "About Us"
    3. about.html, line 9, added in h1 tag for a title on the About Us page that reads "The Furniture Shop Story"
    4. about.html, line 10, added in h3 tag for some content
    5. AboutUsController, file, added a Java class to act as the controller for the about html file
    6. AboutUsController, lines 7-15, added in the correct mapping to call about.html
    7. about.html, line 8, added in th:href that redirects to home page
    8. mainscreen.html, line 17, added in th:href that redirects to the about page

E - Add a sample inventory appropriate for your chosen store to the application.
You should have five parts and five products in your sample inventory and should not overwrite existing data in the database.

    1. BootStrapData.java, line 42 & 57, removed comments (/*, */)
    2. BootStrapData.java, line 43, Changed the new OutsourcedPart to "DoorKnob"
    3. BootStrapData.java, line 44, Changed setCompanyName to "Hardware Is Us"
    4. BootStrapData.java, line 45, Changed setName to "Door Knob"
    5. BootStrapData.java, line 46, Changed setInv to "25"
    6. BootStrapData.java, line 47, Changed setPrice to "10.0"
    7. BootStrapData.java, line 48, Changed setId to "1000"
    8. BootStrapData.java, line 49, Changed save to "DoorKnob"
    9. BootStrapData.java, line 51-57, Created part "hinge"
    10. BootStrapData.java, line 59-65, Created part "dowel"
    11. BootStrapData.java, line 67-73, Created part "handle"
    12. BootStrapData.java, line 78-74, Created part "plank"
    13. BootStrapData.java, line 76-86, Adjusted if statement to work with the five created parts
    14. BootStrapData.java, line 95 & 100, Uncommented lines 95 & 100
    15. BootStrapData.java, line 97 & 106, Added 5 new products and saved the new products
    16. BootStrapData.java, line 90, Removed second declaration of outsourcedParts

F. Add a “Buy Now” button to your product list. Your “Buy Now” button must meet each of the following parameters:
   •  The “Buy Now” button must be next to the buttons that update and delete products.
   •  The button should decrement the inventory of that product by one. It should not affect the inventory of any of the associated parts.
   •  Display a message that indicates the success or failure of a purchase.

   1. BootStrapJava.java, line 36-106, added comments to not get duplicate parts/products on every run of DemoApplication
   2. mainscreen.html, line 86, added in a "Buy Now" button
   3. mainscreen.html, line 86, Changed the button to a form after realizing a POST request is required to modify inventory count
   4. MainScreenController.java, line 61-74, added in PostMapping buyProduct that decreased the inventory by 1 for every "purchase" and then displays a message
   5. mainscreen.html, line 94, Added in the code that will display the message after the "Buy Now" button is pressed
   6. MainScreenController.java, line 70 & 73, adding in a status status that will allow me to have the successful purchase be green and a failure be red
   7. mainscreen.html, line 94-111, Added in a css class that will make the status message green or red depending on what the status message from the controller is

G. Modify the parts to track maximum and minimum inventory by doing the following:
   •  Add additional fields to the part entity for maximum and minimum inventory.
   •  Modify the sample inventory to include the maximum and minimum fields.
   •  Add to the InhousePartForm and OutsourcedPartForm forms additional text inputs for the inventory so the user can set the maximum and minimum values.
   •  Rename the file the persistent storage is saved to.
   •  Modify the code to enforce that the inventory is between or at the minimum and maximum value.

   1. Part.java, line 32-33, added minInv field
   2. Part.java, line 34-35, added maxInv field
   3. Part.java, line 59-63, added new Part Constructor
   4. Part.java, line 97, added new setter setMinInv
   5. Part.java, line 99, added new getter getMinInv
   6. Part.java, line 101, added new setter setMaxInv
   7. Part.java, line 103, added new getter getMaxInv
   8. BootStrapData.java, line 43-44, added in setMinValue and setMaxValue to part "DoorKnob"
   9. BootStrapData.java, line 53-54, added in setMinValue and setMaxValue to part "hinge"
   10. BootStrapData.java, line 63-64, added in setMinValue and setMaxValue to part "dowel"
   11. BootStrapData.java, line 73-74, added in setMinValue and setMaxValue to part "handle"
   12. BootStrapData.java, line 83-84, added in setMinValue and setMaxValue to part "plank"
   13. InhousePartForm.html, line 24-25, added text inputs for minInv
   14. InhousePartForm.html, line 27-28, added text inputs for maxInv
   15. OutsourcedPartForm.html, line 25-26, added text inputs for minInv
   16. OutsourcedPartForm.html, line 28-29, added text inputs for maxInv
   17. Renamed physical database file from "spring-boot-h2-db.mv.db" to "d287_test.db"
   18. application.properties, line 6, Renamed database file pointer from "spring-boot-h2-db.mv.db" to "d287_test.db"
   19. Part.java, 64-66, Added in a method to check if the inventory is within the min and max values
   20. AddInhousePartController.java, line 45-58, Added in validation to check if the inventory is between the minInv and maxInv values
   21. AddOutsourcedPartController.java, line 43-56   , Added in validation to check if the inventory is between the minInv and maxInv values

H. Add validation for between or at the maximum and minimum fields. The validation must include the following:
   •  Display error messages for low inventory when adding and updating parts if the inventory is less than the minimum number of parts.
   •  Display error messages for low inventory when adding and updating products lowers the part inventory below the minimum.
   •  Display error messages when adding and updating parts if the inventory is greater than the maximum.

   1. AddInhousePartController.java, line 46-56, Adjusted if statement to display a message if the inventory is either too low or too high
   2. AddOutsourcedPartController.java, line 44-53, Adjusted if statement to display a message if the inventory is either too low or too high
   3. EnufPartsValidator.java, line 37, Added a variable inventoryChange that decrements the associated parts by 1
   4. EnufPartsValidator.java, line 40, Changed the if statement to decrement by inventoryChange
   5. ValidEnufParts.java, line 20, Made the error message less generic